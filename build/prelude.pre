// -*- mode: javascript; fill-column: 80; -*-

// Compiler directives:

// _S  : coerce to string
// _N  : coerce to number
// _B  : coerce to boolean
// ;   : end declaration or statement
// let : compiler declaration

// Built-in syntax:

// [] : unary array constructor or object dereference
// () : grouping or function/method call
// +  : numeric addition or coercion to number (NOT string concatenation)
// !  : negation (with implicit coercion to boolean)
// {} : empty object literal

// References:

// http://discogscounter.getfreehosting.co.uk/js-noalnum.php
// http://patriciopalladino.com/blog/2012/08/09/non-alphanumeric-javascript.html


// -----------------------------------------------------------------------------
// BIG BANG: let there be truth.
// -----------------------------------------------------------------------------

let false = ![],
    true = !false;

let 0 = _N(false),
    1 = _N(true),
    2 = 1+1,
    3 = 2+1,
    4 = 3+1,
    5 = 4+1,
    6 = 5+1,
    7 = 6+1,
    8 = 7+1,
    9 = 8+1;

let "0" = _S(0),
    "1" = _S(1),
    "2" = _S(2),
    "3" = _S(3),
    "4" = _S(4),
    "5" = _S(5),
    "6" = _S(6),
    "7" = _S(7),
    "8" = _S(8),
    "9" = _S(9);

let "" = _S([]);

let undefined = [][false];

let NaN = _N([false]);

let "true" = _S(true),
    "false" = _S(false),
    "undefined" = _S(undefined),
    "NaN" = _S(NaN);

let "t" = "true"[0],
    "r" = "true"[1],
    "e" = "true"[3];

let "f" = "false"[0],
    "a" = "false"[1],
    "l" = "false"[2],
    "s" = "false"[3];

let "u" = "undefined"[0],
    "n" = "undefined"[1],
    "d" = "undefined"[2],
    "i" = "undefined"[5];

let "o" = _S({})[1],
    "b" = _S({})[2],
    "j" = _S({})[3],
    "c" = _S({})[5],
    " " = _S({})[7],
    "O" = _S({})[8];

let "N" = "NaN"[0];

let Infinity = _N("1e1000");

let "I" = _S(Infinity)[0],
    "y" = _S(Infinity)[7];

let String = "true".constructor,
    Number = (0).constructor,
    Function = [].constructor.constructor,
    Array = [].constructor;

let "+" = _S(_N("1e21"))[2],
    "[" = _S({})[0],
    "]" = _S({})[14];

// FIXME: optimizations
// - concatenate things at high-low-digit offsets to get them to low-digit offsets


let isNaN = Function(`return is${NaN}`)();

// The filter removes all whitespace (which isNaN thinks is a number), resulting in:
// 
//     ["f", "u", "n", "c", "t", "i", "o", "n", "N", "u", "m", "b", "e", "r", ...]
//     ["f", "u", "n", "c", "t", "i", "o", "n", "S", "t", "r", "i", "n", "g", ...]

let "m" = [].slice.call(_S(Number)).filter(isNaN)[10],
    "S" = [].slice.call(_S(String)).filter(isNaN)[8],
    "g" = [].slice.call(_S(String)).filter(isNaN)[13];

// ECMAScript doesn't mandate radices greater than 10, but it does require that they
// use lowercase letters and give proper answers if they give any answer at all. And
// web compatibility seems to require it, so it's portable.

let global(x) = (Function(`return ${x}`))();

let "p" = (25).toString(26),
    "h" = (17).toString(18);

let escape = global("escape"),
    unescape = global("unescape");

let "%" = escape(" ")[0];

let "." = unescape("%2e"),
    "=" = unescape("%3d");
    
// -----------------------------------------------------------------------------
// BOOTSTRAP 1. Create scratch space with most expensive common characters.
// -----------------------------------------------------------------------------

// Cheapest non-index names (in order from cheapest to most expensive):

// ""
// "false"      - "constructor"
// "true"       - "prototype"
// "NaN"        - "toString"
// "undefined"  - Function
// "["
// "o"          - unescape
// "f"          - escape
// "a"          - (lowercase alphabet)
// "t"          - (uppercase alphabet)
// "r"          - "push"
// "u"          - (keywords)
// "n"          - (sigils)
// "b"
// "l"
// "d"

// Cheapest indices:

// "0"
// "1"
// "10"
// "11"
// "20"

Function("this[[]]=arguments[0]").bind(Array.prototype)(["."].concat("=").concat("h").concat("m").concat("p").concat("g"));

let scratch = [][""];

let "." = scratch[0],
    "=" = scratch[1],
    "h" = scratch[2],
    "m" = scratch[3],
    "p" = scratch[4],
    "g" = scratch[5];

let install(x, v) = Function(`this.${x}=arguments[0]`).bind(scratch)(v);

// -----------------------------------------------------------------------------
// BOOTSTRAP 2. Most common identifiers.
// -----------------------------------------------------------------------------

install(false, "constructor");

let "constructor" = scratch[false];

install(true, "prototype");

let "prototype" = scratch[true];

install(NaN, "toString");

let "toString" = scratch[NaN];

// -----------------------------------------------------------------------------
// BOOTSTRAP 3. Most common functions.
// -----------------------------------------------------------------------------

install(undefined, Function);

let Function = scratch[undefined];

install("o", unescape);

let unescape = scratch.o;

install("f", escape);

let escape = scratch.f;

// -----------------------------------------------------------------------------
// BOOTSTRAP 4. Alphabets. Starting to get more organized now.
// -----------------------------------------------------------------------------

let "k" = (20).toString(21),
    "q" = (26).toString(27),
    "v" = (31).toString(32),
    "w" = (32).toString(33),
    "x" = (33).toString(34),
    "z" = (35).toString(36);

install("a", "abcdefghijklmnopqrstuvwxyz");

let "k" = scratch.a[10],
    "q" = scratch.a[16],
    "v" = scratch.a[21],
    "w" = scratch.a[22],
    "x" = scratch.a[23],
    "z" = scratch.a[25];

let "U" = unescape("%55"),
    "C" = unescape("%43");

install("t", scratch.a.toUpperCase());

install("r", "push");

// Keywords

install("u", []);

scratch.u.push("while");
scratch.u.push("return");
scratch.u.push("this");
scratch.u.push("if");
scratch.u.push("null");
scratch.u.push("else");
scratch.u.push("break");
scratch.u.push("function");

// Sigils

// install("s", []);

install("n", []);

let "(" = unescape("%28"),
    ")" = unescape("%29"),
    "{" = unescape("%7b"),
    "}" = unescape("%7d"),
    "," = unescape("%2c"),
    ";" = unescape("%3b"),
    "<" = unescape("%3c"),
    ">" = unescape("%3e"),
    "-" = unescape("%2d"),
    "!" = unescape("%21");

scratch.n.push("(");
scratch.n.push(")");
scratch.n.push("[");
scratch.n.push("]");
scratch.n.push("{");
scratch.n.push("}");
scratch.n.push(",");
scratch.n.push(";");
scratch.n.push("=");
scratch.n.push("==");
scratch.n.push("===");
scratch.n.push("<");
scratch.n.push(">");
scratch.n.push("+");
scratch.n.push("-");
scratch.n.push("++");
scratch.n.push("--");
scratch.n.push("!");
